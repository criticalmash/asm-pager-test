'use strict';

var assemble = require('assemble');
var extname = require('gulp-extname');
var midden = require('assemble-midden');
var browserSync = require('browser-sync').create();
var watch = require('base-watch');
var app = assemble();
var path = require('path');

// custom collections
app.create('newsitems'); // files in templates/news
app.create('newsindex'); // autogenerated pages

app.helper('midden', midden(true));
app.helpers('helpers', require('handlebars-helpers')());

app.use(watch());

/**
 * A simple widdleware to add a usable permalink to each newsitem,
 * will be used when rendering the paginator.
 * @param  {[type]} view  [description]
 * @param  {[type]} next) {               if (typeof next ! [description]
 * @return {[type]}       [description]
 */
app.newsitems.preRender(/\.hbs$/, function newspaths(view, next) {
    if (typeof next !== 'function') {
      throw new TypeError('expected a callback function');
    }
    // if (view.data ) {
      view.data.finalPath = "/news/" + path.parse(view.data.path).name + ".html";
      view.data.touch = "true";
    // }
    next(null, view);
});
app.newsitems.preRender(/\.hbs$/, function newspaths(view, next) {
    console.log('preRender news items');
    next(null, view);
});

app.newsindex.preRender(/\.hbs$/, function newspaths(view, next) {
    console.log('preRender newsindex');
    next(null, view);
});


/**
 * Load templates
 */
app.task('layouts', function (cb) {
  app.layouts('templates/layouts/**/*.hbs');
  cb();
});

app.option('layout', 'default');

// tasks
/**
 * Renders news posts and their index pages
 */
app.task('newspager', function(){
  app.newsitems('templates/news/*.hbs');
  // turn page collection into a list collection
  var newsList = app.list(app.newsitems);
  // use List's built-in paginator function to create a paginated list
  // 7 posts at 5 posts per page will give us two items
  var newsPaginated = newsList.paginate({limit: 5});
  // see CLI output to understand paginator format
  console.log(newsPaginated);
  // loop through array and create a view for each one
  newsPaginated.forEach(function(page, i){
    var pageNum = i + 1; // paginator indexes by 1
    var pageName = 'news-' + pageNum + '.hbs';
    var pageContents = '---\ntitle: News releases\nlayout: pagin.hbs\n---\n' + pageName;
    var pageObj = {
      content: pageContents,
      data: page,
      path: pageName
    };
    app.newsindex.addView(pageName, pageObj);
  });

  // render our indexes
  app.toStream('newsindex')
    .pipe(app.renderFile())
    .on('err', console.error)
    .pipe(extname())
    .pipe(app.dest('dist'));

  // render news items
  return app.toStream('newsitems')
    .pipe(app.renderFile())
    .pipe(extname())
    .pipe(app.dest('dist/news'));
})

/**
 * TO-DO: add task that copies midden js/css files into dist
 */

app.task('content', ['layouts', 'newspager'], function() {
  app.pages('templates/content/*.hbs');
  return app.toStream('pages')
    .pipe(app.renderFile())
    .pipe(extname())
    .pipe(app.dest('dist'))
    .pipe(browserSync.stream());
});

app.task('serve', function () {
  browserSync.init({
    port: 8000,
    startPath: 'index.html',
    server: {
      baseDir: 'dist'
    }
  });
});

app.task('watch', function () {
  app.watch('templates/**/*.hbs', ['content']);
});


// build site, serve then watch for edits
app.task('default', ['content'], app.parallel(['serve', 'watch']));

module.exports = app;
